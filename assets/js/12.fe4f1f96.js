(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{85:function(e,a,r){"use strict";r.r(a);var n=r(0),t=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"dockerfile优化体验"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile优化体验","aria-hidden":"true"}},[e._v("#")]),e._v(" Dockerfile优化体验")]),r("h2",{attrs:{id:"选好镜像，减少最终image体积"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#选好镜像，减少最终image体积","aria-hidden":"true"}},[e._v("#")]),e._v(" 选好镜像，减少最终image体积")]),r("blockquote",[r("p",[e._v("Whenever possible, use current Official Repositories as the basis for your image. We recommend the Alpine image since it’s very tightly controlled and kept minimal (currently under 5 mb), while still being a full distribution.")])]),r("p",[e._v("上面这段是来自"),r("a",{attrs:{href:"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#from",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker的官方文档")]),e._v("，言语之中极力推荐我们使用"),r("a",{attrs:{href:"https://alpinelinux.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Alpine Linux")]),e._v("，它的特点是短小精悍，只有不到5M。Base镜像的体积会对最后Build处理的镜像的体积有非常大的影响。举个"),r("a",{attrs:{href:"https://hub.docker.com/r/library/node/tags/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker官方的Node镜像的例子")]),e._v("不同Base镜像的Size分别是这样的")]),r("table",[r("thead",[r("tr",[r("th",[e._v("Image")]),r("th",[e._v("Size")])])]),r("tbody",[r("tr",[r("td",[e._v("8.11-alpine")]),r("td",[e._v("23M")])]),r("tr",[r("td",[e._v("8.11-slim")]),r("td",[e._v("92 MB")])]),r("tr",[r("td",[e._v("8.11")]),r("td",[e._v("266 MB")])])])]),r("p",[r("strong",[e._v("太明显了")])]),r("h2",{attrs:{id:"用好docker-cache，加速构建"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#用好docker-cache，加速构建","aria-hidden":"true"}},[e._v("#")]),e._v(" 用好Docker cache，加速构建")]),r("p",[e._v("Docker image 构建的时候会对当前构建的层(Layer)做缓存，当前层的上一层没有变的时候，会直接在上一层的基础上进行Build，这样的话能大大加快后续的构建速度。当然我们可以强制不使用缓存，在"),r("code",[e._v("docker build")]),e._v("命令后加上 "),r("code",[e._v("--no-cache=true")]),e._v("就可以强制让Docker从头开始构建。\n先举个例子,假设我们的目录是这样的")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("web\n├── Dockerfile\n├── config\n├── node_modules\n├── package.json\n├── src\n└── yarn.lock\n")])]),r("p",[e._v("不太好的"),r("code",[e._v("Dockerfile")]),e._v("里面是这样的")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('FROM node:8.11.1-alpine\nLABEL maintainer="Iron Lu <lrironsora@gmail.com>"\nWORKDIR ./app\nCOPY ./ ./\nRUN yarn install && yarn build --production\n...\n')])]),r("p",[e._v("上面这段代码最大的问题是。会有很大一部分情况，我们是修改了"),r("code",[e._v("src")]),e._v("目录，但没有更改项目的依赖的，但是"),r("code",[e._v("yarn install")]),e._v("在每一轮安装的时候都被行了一遍，每次装依赖的时间开销是完全可以用Docker cache避免的。\n正确的做法如下\b")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('FROM node:8.11.1-alpine\nLABEL maintainer="Iron Lu <lrironsora@gmail.com>"\nWORKDIR ./app\nCOPY package.json yarn.lock ./\n# Copy package.json和yarn.lock到镜像中\n# 当项目的依赖没有改变，仅改变了src中的代码时\n# 接下来的构建会直接通过缓存，从下面开始\nRUN yarn install\nCOPY ./ ./\nRUN yarn install && yarn build --production\n')])]),r("p",[e._v("再说一个用错Docker cache的例子")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("FROM ubuntu:14.04\nRUN apt-get update\nRUN apt-get install -y curl nginx\n")])]),r("p",[r("code",[e._v("RUN apt-get update")]),e._v("那一行会被缓存，导致我们无法安装最新版的package。\n所以，在"),r("a",{attrs:{href:"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#run",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档")]),e._v("中，特别强调了这样的一句")]),r("blockquote",[r("p",[e._v("Always combine RUN apt-get update with apt-get install in the same RUN statement.")])]),r("p",[e._v("\b正确的做法当然是")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("RUN apt-get update && apt-get install -y \\\n    package-bar \\\n    package-baz \\\n    package-foo\n")])]),r("h2",{attrs:{id:"移除不必要的文件，进一步减少image体积"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#移除不必要的文件，进一步减少image体积","aria-hidden":"true"}},[e._v("#")]),e._v(" 移除不必要的文件，进一步减少image体积")]),r("h3",{attrs:{id:"使用-dockerignore文件来忽略那些不应该被打包进来的文件。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用-dockerignore文件来忽略那些不应该被打包进来的文件。","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用.dockerignore文件来忽略那些不应该被打包进来的文件。")]),r("p",[e._v("显然，"),r("code",[e._v("node_modules")]),e._v("是绝对不能放进来的。这部分是由项目决定的。凡是与镜像构建或容器运行无关的，都不应该被放进来。\n下面是我项目中的例子")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("dist/\nnode_modules/\nDockerfile\n.eslintrc.yml\nREADME.md\nsass-lint.yml\nyarn-error.log\nconfig/webpack/public\n")])]),r("h3",{attrs:{id:"删除镜像内不会再用到的文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除镜像内不会再用到的文件","aria-hidden":"true"}},[e._v("#")]),e._v(" 删除镜像内不会再用到的文件")]),r("p",[e._v("举个例子，我们在Docker中使用"),r("code",[e._v("webpack")]),e._v(" 构建了"),r("code",[e._v("dist")]),e._v("文件，那么"),r("code",[e._v("src")]),e._v("就不会再被用到。而且"),r("code",[e._v("node_modules")]),e._v("里的一些依赖也不会再被用到，比如"),r("code",[e._v("babel")]),e._v(", "),r("code",[e._v("webpack")]),e._v("等，那么我们就可以把它移除掉来缩减体积。\n关于怎么移除"),r("code",[e._v("node_modules")]),e._v("里无用的依赖，我的做法是：将所有Build相关的依赖放入"),r("code",[e._v("package.json")]),e._v("的"),r("code",[e._v("devDependencies")]),e._v("中，在dependencies中只放静态文件服务器所需要的2个package：\n"),r("code",[e._v("express")]),e._v("和"),r("code",[e._v("connect-history-api-fallback")]),e._v("。")]),r("p",[r("strong",[e._v("这也许是个不好的实现")])]),r("p",[e._v("我的Dockerfile如下")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("WORKDIR ./app\nADD package.json ./ yarn.lock ./ package-lock.json ./\nRUN yarn install\n\nCOPY ./ ./\nRUN yarn build:prod &&\\\n  yarn install --production &&\\\n  # 删除node_moudules无用依赖\n  yarn cache clean &&\\\n  # 这一步可以清掉yarn的缓存\n  rm -rf config/webpack/public\n")])]),r("p",[e._v("当执行"),r("code",[e._v("yarn install --production")]),e._v("时，\b"),r("code",[e._v("node_modules")]),e._v("中无用的package都会被移除掉，移除前后的体积对比如下")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("~/foo/ du -hs node_modules\n357M    node_modules\n~/foo/ yarn install --production\n✨  Done in 7.31s.\n~/foo du -hs node_modules\n2.2M    node_modules\n")])]),r("p",[r("strong",[e._v("差不多少了350M，减肥是很有效果的。")])]),r("h3",{attrs:{id:"移除安装过程中的下载的包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#移除安装过程中的下载的包","aria-hidden":"true"}},[e._v("#")]),e._v(" 移除安装过程中的下载的包")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("rm -rf /var/lib/apt/lists/*\n# \b删除Ubuntu apt-get 的缓存\nyum clean all\n# 删除CentOS yum的缓存\nyarn clean\n# 删除yarn的缓存\n")])]),r("h2",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[e._v("#")]),e._v(" 参考资料")]),r("p",[r("a",{attrs:{href:"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Best practices for writing Dockerfiles")])]),r("p",[r("a",{attrs:{href:"https://hackernoon.com/tips-to-reduce-docker-image-sizes-876095da3b34",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tips to Reduce Docker Image Sizes")])])])}],!1,null,null,null);a.default=t.exports}}]);