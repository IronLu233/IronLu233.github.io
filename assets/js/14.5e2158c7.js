(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{83:function(t,s,a){"use strict";a.r(s);var n=a(0),o=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"精读-mobx-react-—-best-practices"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#精读-mobx-react-—-best-practices","aria-hidden":"true"}},[t._v("#")]),t._v(' 精读 "Mobx React — Best Practices"')]),a("p",[a("img",{attrs:{src:"https://cdn-images-1.medium.com/max/1600/1*fVyLVvnbisXOgh1v3EhTrg.png",alt:"Cover"}})]),a("blockquote",[a("p",[t._v("原文链接在此 https://medium.com/dailyjs/mobx-react-best-practices-17e01cec4140")])]),a("p",[t._v("在制定"),a("a",{attrs:{href:"https://tuia-fed.github.io/fed-standard/#/./mobxReact",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端后台开发规范")]),t._v("时，在谷歌上查阅了无数关于 Mobx 和 React 最佳实践的文章，从这篇文章中，获得了许多灵感。细思原因后，他改变了许多以往对 Mobx 的认知。")]),a("h2",{attrs:{id:"第一条-store-的状态代表了-ui-的状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一条-store-的状态代表了-ui-的状态","aria-hidden":"true"}},[t._v("#")]),t._v(" 第一条: Store 的状态代表了 UI 的状态")]),a("p",[t._v("下面是第一条的译文和代码")]),a("p",[t._v("总是谨记 Store 代表了 UI 的状态。这意味着将 Store 中的数据存为一个文件，关闭程序并随着加载 Store 重新启动它，你能获得相同的程序，并且能看到与之前关闭时相同的东西。Store 并不是”本地数据库“，它们还包含着哪些按钮是否可见，是否被禁用，当前输入框字段的文字等等。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("SearchStore")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  @observable searchText"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  @action\n  "),a("span",{attrs:{class:"token function-variable function"}},[t._v("setSearchText")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" searchText "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("searchText "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" searchText"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n@observer\n"),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("SearchInput")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("React"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function-variable function"}},[t._v("handleInputChanged")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" event "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" searchStore "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    searchStore"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("setSearchText")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{attrs:{class:"token function"}},[t._v("render")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" searchStore "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("input\n        value"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("searchStore"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("searchText"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        onChange"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("handleInputChanged"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("h3",{attrs:{id:"想法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#想法","aria-hidden":"true"}},[t._v("#")]),t._v(" 想法")]),a("p",[t._v('过去我们将 Mobx 仅仅当做一个存放 Ajax 和公共状态的一个容器(上文所说的"本地数据库")。这种想法不符合 Mobx 设计的本意。')]),a("p",[t._v("通过"),a("a",{attrs:{href:"https://mobx.js.org/best/store.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档的此处")]),t._v("的说明，Mobx 将 Store 分为两部分，UI Store 和领域 Store。")]),a("h4",{attrs:{id:"ui-store"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ui-store","aria-hidden":"true"}},[t._v("#")]),t._v(" UI Store")]),a("p",[t._v("UI store 中应该能找到这些信息。他们广泛被各个")]),a("ul",[a("li",[t._v("Session 信息")]),a("li",[t._v("应用已经加载了的相关信息")]),a("li",[t._v("不会存储到后端的信息")]),a("li",[t._v("全局性影响 UI 的信息")]),a("li",[a("ul",[a("li",[t._v("窗口尺寸")])])]),a("li",[a("ul",[a("li",[t._v("可访问性信息")])])]),a("li",[a("ul",[a("li",[t._v("当前语言")])])]),a("li",[a("ul",[a("li",[t._v("当前活动主题")])])]),a("li",[t._v("用户界面状态瞬时影响多个、毫不相关的组件:")]),a("li",[a("ul",[a("li",[t._v("当前选择")])])]),a("li",[a("ul",[a("li",[t._v("工具栏可见性, 等等")])])]),a("li",[a("ul",[a("li",[t._v("向导的状态")])])]),a("li",[a("ul",[a("li",[t._v("全局叠加的状态")])])])]),a("h4",{attrs:{id:"领域-store"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#领域-store","aria-hidden":"true"}},[t._v("#")]),t._v(" 领域 Store")]),a("p",[t._v("他的职责如下")]),a("ul",[a("li",[t._v("实例化领域对象， 确保领域对象知道它们所属的 store。")]),a("li",[t._v("确保每个领域对象只有一个实例。 同一个用户、订单或者待办事项不应该在内存中存储两次。 这样，可以安全地使用引用，并确保正在查看的实例是最新的，而无需解析引用。 当调试时这十分快速、简单、方便。")]),a("li",[t._v("提供后端集成，当需要时存储数据。")]),a("li",[t._v("如果从后端接收到更新，则更新现有实例。")]),a("li",[t._v("为你的应用提供一个独立、通用、可测试的组件。")]),a("li",[t._v("要确保 store 是可测试的并且可以在服务端运行，你可能需要将实际的 websocket/http 请求移到单独的对象，以便你可以通过通信层抽象。\nStore 应该只有一个实例。")])]),a("p",[t._v("综上所述，我们认为 Mobx 仅用于状态的共享是错误的。从用途上讲，它跟 React 的 State 用途一模一样，职责都是存储状态。而且从使用便利性和性能上说，Mobx 的 Store 更优。")]),a("p",[a("strong",[t._v("那么 Store 代替 state 是完全可行的")]),t._v("。Store 和 state 之间对于业务组件而言，需要二选一。因为这样保证数据源单一，更容易调试。")]),a("h2",{attrs:{id:"将-rest-请求-ajax-请求-从-store-中分离出去"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将-rest-请求-ajax-请求-从-store-中分离出去","aria-hidden":"true"}},[t._v("#")]),t._v(" 将 REST 请求(Ajax 请求)从 store 中分离出去")]),a("p",[t._v("不要在 Store 中调用 REST 接口，这会导致它们很难被测试。而是把这些 REST 调用移除到额外的类中，并且将它们的实例通过构造函数传给各个 store。\n当你写测试时，你能轻易地伪造这些 API 调用并且将各个伪 API 传给各个 store。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("TodoApi")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function-variable function"}},[t._v("fetchTodos")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" request"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("get")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'/todos'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("TodoStore")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  @observable todos "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{attrs:{class:"token function"}},[t._v("constructor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("todoApi"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("todoApi "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" todoApi"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  fetchTodos "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" todos "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("todoApi"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("fetchTodos")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token function"}},[t._v("runInAction")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("todos "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" todos"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// Then in your main")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" todoApi "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("TodoApi")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" todoStore "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("TodoStore")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("todoApi"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),a("h3",{attrs:{id:"想法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#想法-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 想法")]),a("p",[t._v("理论上来看，分离 Ajax 请求的行为符合关注点分离原则，使得 Store 专注于处理业务逻辑和存储业务状态，能减缓 Store 中代码的膨胀速度。")]),a("p",[t._v("至于易于测试这个优点，现实是大部分的前端是不会为自己业务写单元测试的。特别是需求多的时候。属于说得对，很难操作的建议。")]),a("h2",{attrs:{id:"将你的业务逻辑写在-store-中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将你的业务逻辑写在-store-中","aria-hidden":"true"}},[t._v("#")]),t._v(" 将你的业务逻辑写在 Store 中")]),a("p",[t._v("不要将业务逻辑写在组件中。当你把业务逻辑写在组件中时，你将没有就会去复用它。")]),a("p",[t._v("你的业务逻辑被分割成很多份，分布于不同的组件中，这会使得重构或复用变得艰难。将业务逻辑和方法写在 Store 中，并且在组件中调用那些方法。")]),a("h3",{attrs:{id:"看法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#看法","aria-hidden":"true"}},[t._v("#")]),t._v(" 看法")]),a("p",[t._v("将代码写在 Store 中，最大的优点还是使得组件代码专注于状态的展示，不负责状态改变的行为。一个简短的组件绝对比一个杂糅了复杂状态变化逻辑的千行代码组件更容易维护。")]),a("p",[t._v("至于逻辑复用，可以通过继承 Store 来实现，这点在推啊某个核心页面的重构中已经实践过了。当然，与状态无关的逻辑，更好的处理方式是抽离到 Service 或者 Util 中。")]),a("p",[t._v("关于"),a("code",[t._v("React Hooks")]),t._v("，因为与 Mobx 存在冲突，不在讨论范围之内。")]),a("h2",{attrs:{id:"不要创建全局-store-的实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不要创建全局-store-的实例","aria-hidden":"true"}},[t._v("#")]),t._v(" 不要创建全局 Store 的实例")]),a("p",[t._v("不要再创建全局 Store 实例。这会使你无法为组件写出合理且可靠的测试。使用"),a("code",[t._v("Provider")]),t._v("和"),a("code",[t._v("inject")]),t._v("将 store 注入到 props 中替代它。\n之后在你的测试中，你能轻松地模拟这些 Store。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" searchStore "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("SearchStore")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" app "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Provider searchStore"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("searchStore"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("SearchInput "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("Provider"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nReactDom"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("render")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("app"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),a("h3",{attrs:{id:"想法-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#想法-3","aria-hidden":"true"}},[t._v("#")]),t._v(" 想法")]),a("p",[t._v("React 的设计中，组件可以表示为一个函数"),a("code",[t._v("Component = F(props, state)")]),t._v("。使用 Inject 和 Provider 能使得组件更加 declarable。组件仅由 props 决定，而不会由闭包引入外部的依赖。\n另外，Redux 传统的 Container + Components 的模式中，会带来这样一个问题：")]),a("p",[t._v("各种属性和方法需要从 Container 往下传递时，需要通过 Props 一层一层往下传。使得组件的 props 列表变得很长。")]),a("p",[t._v("因此通过 inject 分发 store 的状态到对应状态的使用者中，能完美解决 props 列表过长的问题。")]),a("h2",{attrs:{id:"只允许-store-改变它自己的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#只允许-store-改变它自己的属性","aria-hidden":"true"}},[t._v("#")]),t._v(" 只允许 Store 改变它自己的属性")]),a("p",[t._v('永远不要在组件中改变 Store 的属性。仅允许 Store 能改变它自己的属性。总是调用 Store 中用于改变 Store 的属性们的方法。除此之外你的应用状态(store 即为应用的状态)(此处"应用"大部分时候指的是网页应用，译者注)被在任何地方更新，你会渐渐地失去对它的控制。这会导致 Debug 变得困难。')]),a("h3",{attrs:{id:"想法-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#想法-4","aria-hidden":"true"}},[t._v("#")]),t._v(" 想法")]),a("p",[t._v("限制 Store 的数据仅在 Store 中更改，是百利而无一害的（虽然看起来能在各处更改 Store 的状态很爽，但维护成本会高到吓人，甚至被其他同事口吐芬芳）。\n因为这样限定了可能改变 Store 代码区域的范围。显然小范围代码的 Debug 明显比在整个应用追踪 Store 的属性改变简单了不少。")]),a("h3",{attrs:{id:"为每个组件注解-observer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为每个组件注解-observer","aria-hidden":"true"}},[t._v("#")]),t._v(" 为每个组件注解"),a("code",[t._v("@observer")])]),a("p",[t._v("为每个组件注解"),a("code",[t._v("@observer")]),t._v("能允许各个组件在 store 注入的 props 改变时更新。除此之外，父组件被"),a("code",[t._v("@observer")]),t._v("注解的时候，当它需要重新渲染的时候，子组件也会重新渲染(此处的渲染通常是 React 中的调和，译者注)。因此更少的组件需要被渲染。")]),a("h3",{attrs:{id:"想法-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#想法-5","aria-hidden":"true"}},[t._v("#")]),t._v(" 想法")]),a("p",[t._v("使用 React 的 State 或者 Redux 存储状态和下发状态，性能问题是这样造成的：\n页面上某块很小的组件的状态改变时，比如输入框的值产生变化，在不使用"),a("code",[t._v("React.PureComponent")]),t._v("和"),a("code",[t._v("React.memo")]),t._v("的情况下，这个 Container 下的所有组件都会触发 React 的调和机制。当页面足够复杂或者有大量表单时，就会引起性能问题。")]),a("p",[t._v("而"),a("code",[t._v("@observer")]),t._v("使用了一种成本极低的方式，通过追踪 observable 对象的依赖，做到按需更新，提高页面性能。")]),a("h2",{attrs:{id:"使用-computed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-computed","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用 "),a("code",[t._v("@computed")])]),a("p",[t._v("假设你想当用户不是管理员时，禁用按钮，并且使得应用为”非管理员模式“，单个想"),a("code",[t._v("isAdmin")]),t._v("这样的属性在 store 中并不能满足这种情况。在你的 store 中，你需要一个计算属性。")]),a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("ApplicationStore")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  @observable loggedInUser"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  @observable isInAdminMode"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  @computed "),a("span",{attrs:{class:"token function-variable function"}},[t._v("isAdminButtonEnabled")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("loggedInUser"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("role "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'admin'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isInAdminMode"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("h3",{attrs:{id:"想法-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#想法-6","aria-hidden":"true"}},[t._v("#")]),t._v(" 想法")]),a("p",[t._v("对于从"),a("code",[t._v("observable")]),t._v("中衍生出来的状态，使用 computed 能显著减少心智负担，更好地专注于业务。")]),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[t._v("#")]),t._v(" 参考资料")]),a("ul",[a("li",[t._v("Mobx React — Best Practices https://medium.com/dailyjs/mobx-react-best-practices-17e01cec4140")]),a("li",[t._v("Mobx 文档中定义数据存储章节 https://cn.mobx.js.org/best/store.html")])])])}],!1,null,null,null);s.default=o.exports}}]);